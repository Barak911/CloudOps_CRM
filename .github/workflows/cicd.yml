name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: crm-app
  EKS_CLUSTER_NAME: develeap-eks-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Stage 1: Clone/Pull
      - name: Checkout code
        uses: actions/checkout@v4

      # Stage 2: Build the application (not Docker image)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Stage 3: Unit tests
      - name: Run unit tests
        run: |
          pip install pytest
          pytest test_app.py -v

      # Stage 4: Package (Build Docker image)
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REPOSITORY }}:latest

      # Stage 5: End-to-End Testing
      - name: Start test environment
        run: |
          docker compose -f docker-compose.test.yml up -d
          echo "Waiting for services to be ready..."
          sleep 20

      - name: Run E2E tests
        run: |
          chmod +x test_e2e.sh
          ./test_e2e.sh

      - name: Stop test environment
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v

      # Stage 6: Publish to ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          echo "Image pushed: $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

      # Stage 7: Deploy to K8S cluster
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to Kubernetes
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kubectl set image deployment/crm-app crm-app=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG -n default
          kubectl rollout status deployment/crm-app -n default
          echo "Deployment completed successfully!"

      - name: Verify deployment
        run: |
          kubectl get pods -n default
          kubectl get services -n default
