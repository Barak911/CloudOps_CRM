name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: crm-app
  EKS_CLUSTER_NAME: develeap-eks-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      # Stage 1: Clone/Pull
      - name: Checkout code
        uses: actions/checkout@v4

      # Stage 2: Build the application (not Docker image)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Stage 3: Unit tests
      - name: Run unit tests
        run: |
          pip install pytest
          pytest test_app.py -v

      # Stage 4: Package (Build Docker image)
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
          docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REPOSITORY }}:latest

      # Stage 5: End-to-End Testing
      - name: Start test environment
        run: |
          docker compose -f docker-compose.test.yml up -d
          echo "Waiting for services to be ready..."
          sleep 20

      - name: Run E2E tests
        run: |
          chmod +x test_e2e.sh
          ./test_e2e.sh

      - name: Stop test environment
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v

      # Stage 6: Publish to ECR
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          echo "Image pushed: $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

      # Stage 7: Deploy to K8S cluster using Helm
      - name: Check if EKS cluster exists
        id: check-cluster
        run: |
          if aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install kubectl and Helm
        if: steps.check-cluster.outputs.exists == 'true'
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Update kubeconfig
        if: steps.check-cluster.outputs.exists == 'true'
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Clone cluster-resources repository
        if: steps.check-cluster.outputs.exists == 'true'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/CloudOps_CRM_Cluster
          path: cluster-resources
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if Helm release exists
        if: steps.check-cluster.outputs.exists == 'true'
        id: check-helm-release
        run: |
          if helm list -n default | grep -q crm-stack; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy/Upgrade with Helm
        if: steps.check-cluster.outputs.exists == 'true' && steps.check-helm-release.outputs.exists == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd cluster-resources/crm-stack
          helm upgrade crm-stack . \
            --set crm-app.image.repository=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }} \
            --set crm-app.image.tag=$IMAGE_TAG \
            --namespace default \
            --timeout 5m \
            --wait
          echo "Helm release upgraded successfully!"

      - name: Skip deployment (Helm release not found)
        if: steps.check-cluster.outputs.exists == 'true' && steps.check-helm-release.outputs.exists == 'false'
        run: |
          echo "Helm release 'crm-stack' does not exist. Skipping upgrade."
          echo "Please install the Helm chart first: helm install crm-stack ./crm-stack"

      - name: Skip deployment (cluster not found)
        if: steps.check-cluster.outputs.exists == 'false'
        run: |
          echo "EKS cluster '${{ env.EKS_CLUSTER_NAME }}' not found. Skipping deployment."

      - name: Verify deployment
        if: steps.check-cluster.outputs.exists == 'true' && steps.check-helm-release.outputs.exists == 'true'
        run: |
          helm list -n default
          kubectl get pods -n default -l app=crm-app
          kubectl get services -n default
